" load plugins
call plug#begin('~/.vim/plugged')

Plug 'airblade/vim-gitgutter'
Plug 'google/vim-codefmt'
Plug 'google/vim-glaive'
Plug 'google/vim-maktaba'
Plug 'natebosch/vim-lsc'
Plug 'natebosch/vim-lsc-dart'
Plug 'ajh17/VimCompletesMe'
Plug 'ryanoasis/vim-devicons'
Plug 'vim-airline/vim-airline'
Plug 'preservim/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'sainnhe/gruvbox-material'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

call plug#end()
call glaive#Install()
" Glaive codefmt plugin[mappings]

set nocompatible              " be iMproved, required
filetype off                  " required
filetype plugin indent on     " required

"
" colors
"
set termguicolors
set background=dark
let g:gruvbox_material_background = 'medium'
colorscheme gruvbox-material

"
set noerrorbells                " no beeps
set number                      " show line numbers
set backspace=indent,eol,start  " makes backspace key more powerful.
set showcmd                     " show me what i'm typing
set showmode                    " show current mode.

set noswapfile                  " don't use swapfile
set nobackup                    " don't create annoying backup files
set nowritebackup
set splitright                  " split vertical windows right to the current windows
set splitbelow                  " split horizontal windows below to the current windows
set encoding=utf-8              " set default encoding to utf-8
set autowrite                   " automatically save before :next, :make etc.
set autoread                    " Automatically reread changed files without asking me anything
set laststatus=2
set hidden

set ruler                       " Show the cursor position all the time

set fileformats=unix,dos,mac    " Prefer Unix over Windows over OS 9 formats

set noshowmatch                 " Do not show matching brackets by flickering
set noshowmode                  " We show the mode with airline or lightline
set incsearch                   " Shows the match while typing
set hlsearch                    " Highlight found searches
set ignorecase                  " Search case insensitive...
set smartcase                   " ... but not when search pattern contains upper case characters
set ttyfast
set lazyredraw                  " Wait to redraw "

" speed up syntax highlighting
set nocursorcolumn
set nocursorline

syntax sync minlines=256
set synmaxcol=300
set re=1

" do not hide markdown
set conceallevel=0

set autoindent
set complete-=i
set showmatch
set smarttab

set et
set tabstop=2
set shiftwidth=2
set expandtab

set nrformats-=octal
set shiftround

" set nowrap
" set cc=0

" Time out on key codes but not mappings.
" Basically this makes terminal Vim work sanely.
set notimeout
set ttimeout
set ttimeoutlen=10

" Better Completion
set complete=.,w,b,u,t
set completeopt=menu,menuone,noinsert,noselect

if &history < 1000
  set history=1000
endif

if &tabpagemax < 50
  set tabpagemax=50
endif

if !empty(&viminfo)
  set viminfo^=!
endif

if !&scrolloff
  set scrolloff=1
endif
if !&sidescrolloff
  set sidescrolloff=5
endif
set display+=lastline

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
    au!

    " For all text files set 'textwidth' to 78 characters.
    autocmd FileType text setlocal textwidth=78

    " When editing a file, always jump to the last known cursor position.
    " Don't do it when the position is invalid or when inside an event handler
    " (happens when dropping a file on gvim).
    " Also don't do it when the mark is in the first line, that is the default
    " position when opening a file.
    autocmd BufReadPost *
          \ if line("'\"") > 1 && line("'\"") <= line("$") |
          \ exe "normal! g`\"" |
          \ endif

  augroup END
else
endif " has("autocmd")

" This comes first, because we have mappings that depend on leader
" With a map leader it's possible to do extra key combinations
" i.e: <leader>w saves the current file
let mapleader = ","
let g:mapleader = ","

" Change escape sequence
inoremap <Leader><Tab> <Esc>`^

" No Help, please escape instead
map <F1> <Esc>
imap <F1> <Esc>

" Disable Arrow Remaps
nnoremap <up> <nop>
nnoremap <down> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>
nnoremap j gj
nnoremap k gk

" Paste
set clipboard=unnamed
set pastetoggle=<F3>
noremap y "*y
noremap p "*p
noremap Y "+y
noremap P "+p

" Spelling
set spelllang=en

" FZF
let g:fzf_nvim_statusline = 0 " disable statusline overwriting
nnoremap <C-P> :FZF<CR>

" Airline
let g:airline_powerline_fonts = 1
let g:airline_theme = 'gruvbox_material'

" Always Show Gutter
set signcolumn=yes

" Nerd Tree
map <Leader>f :NERDTreeToggle<CR>

" jsonc
autocmd FileType json syntax match Comment +\/\/.\+$+

" invisible
set listchars=tab:→\ ,nbsp:␣,trail:•,precedes:«,extends:»
set list

" Splits
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Icons
let g:webdevicons_enable = 1
let g:webdevicons_enable_airline_statusline = 1

" Autocomplete

" Autoformat
augroup autoformat_settings
  " autocmd FileType bzl AutoFormatBuffer buildifier
  " autocmd FileType c,cpp,proto,arduino AutoFormatBuffer clang-format
  autocmd FileType dart AutoFormatBuffer dartfmt
  autocmd FileType go AutoFormatBuffer gofmt
  " autocmd FileType gn AutoFormatBuffer gn
  autocmd FileType html,css,sass,scss,less,json,javascript AutoFormatBuffer prettier
  " autocmd FileType java AutoFormatBuffer google-java-format
  autocmd FileType python AutoFormatBuffer yapf
  " Alternative: autocmd FileType python AutoFormatBuffer autopep8
  autocmd FileType rust AutoFormatBuffer rustfmt
  " autocmd FileType vue AutoFormatBuffer prettier
augroup END

" LSC
let g:lsc_auto_map = {
  \ 'defaults': v:true,
  \  'GoToDefinition': 'gd',
  \  'FindReferences': 'gr',
  \  'Rename': 'gR',
  \  'ShowHover': 'K',
  \  'FindCodeActions': 'ga',
  \  'Completion': 'omnifunc',
\}
let g:lsc_enable_autocomplete  = v:true
let g:lsc_enable_diagnostics   = v:false
let g:lsc_reference_highlights = v:false
let g:lsc_trace_level          = 'off'
set completeopt=menu,menuone,noinsert,noselect

" npm install -g vscode-html-languageserver-bin
" npm install -g vscode-css-languageserver-bin
" go get golang.org/x/tools/gopls@latest
" npm install -g typescript typescript-language-server
let g:lsc_server_commands = {
\ 'python' : 'pyls',
\ 'javascript': 'typescript-language-server --stdio',
\ 'css': 'css-languageserver --stdio',
\ 'html': 'html-languageserver --stdio',
\ 'go': {
\    'command': 'gopls serve',
\    'log_level': -1,
\    'suppress_stderr': v:true
\  }
\}

" vim:ts=2:sw=2:et
